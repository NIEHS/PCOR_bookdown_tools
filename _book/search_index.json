[["index.html", "06-geo-exposure Introduction About Usage", " 06-geo-exposure S.N. 2023-07-14 Introduction About A collection of my sample r markdown pages. Data set is from Synthetic patient and population health data from the state of Massachusetts in FHIR format. PM 2.5 dataset is from deGAUSS https://degauss.org/ Census data is from deGAUSS and tidycensus Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. To build the book from the R console: bookdown::render_book() "],["data-dictionary.html", "Data Dictionary GeoExposures", " Data Dictionary GeoExposures The following is a catalog for the exposure sources Table variable_name description variable_source gis_latitude Latitude coordinate Geocoding of subject data hazards_pm25_ammonium_ugm3 ACAG estimated PM2.5 conponent: ammonium ion concentration (micrograms per cubic meter) ACAG hazards_benzene_1km Estimated xylene mass in kg using an isotropic sum of exponentially decaying mass equation with an exponential decay range of 1km (see Eq 1). TRI "],["pcor-t-map.html", "PCOR T-map PM 2.5 Tmap", " PCOR T-map PM 2.5 Tmap #{r setup, include=FALSE} #knitr::opts_chunk$set(echo = TRUE) # "],["major-road-exposure.html", "Major road exposure Major road proximity metrics Aircraft landing facility proximity metrics Air pollution exposure", " Major road exposure Major road proximity metrics The following are step-by-step instructions to calculate proximity-based exposure metrics to major roadways in the United States (US) using US NASA (National Aeronautics and Space Administration) Socioeconomic Data and Applications Center (SEDAC) Global Roads Open Access Data Set (Version 1). NASA SEDAC roads data The NASA SEDAC global data includes the locations of major roads (i.e., lines indicating roadway center lines) for the US in 2005. Major roads are categorized based on social and economic importance as follows: Major road classification Description Highways Limited access divided highways connecting major cities. Primary roads Other primary major roads between and into major cities as well as primary arterial roads. Secondary roads Other secondary roads between and into cities as well as secondary arterial roads. Other types of roads, such as tertiary roads, local roads, trails, and private roads, are not included. The following figure illustrates the spatial coverage (all US states and territories) and spatial scale (lines) of the SEDAC roads data: Illustration of NASA SEDAC major roads data (a) spatial coverage (United States, including Alaska, Hawaii, and US territories (not shown)) and (b) spatial scale (lines). Exposure metrics This tool calculates proximity-based (i.e., distance-based) exposure metrics for a specified list of receptor point locations (e.g., geocoded home addresses) to major roads in year 2005. This tool can be used to calculate the following proximity-based metrics within the US: distance to nearest major road and classification of nearest major road length of road within a specified buffer distance of receptor These proximity-based metrics can be calculated for all available major road classifications (i.e., highways, primary roads, and secondary roads) or any subset of them. Output includes information about data missingness (e.g., whether a receptor location is near a US border) as well as an optional log file. Recommended uses This tool is recommended for the following uses: applications for which a proximity-based metric is appropriate. Note: This tool does not provide other relevant exposure information associated with roads, such as traffic, noise levels, or air pollution levels. analyses focused on exposures related specifically to major roads. Note: This tool does not include data for other road classifications, such as local street networks or trails. applications for which most receptor point locations are not located in communities with sections of tunneled or elevated highways. Note: This tool does not provide information about whether roads are at surface level (e.g., elevated, tunneled, etc.). Exposure implications of roadway proximity may differ depending on whether road is at surface level. Some urban highways have varying tunneled, surface-level, or elevated sections (e.g., tunneled sections of US Interstate 90 in Boston, Massachusetts, and in Seattle, Washington). applications for which most receptor point locations are not located near to a US border with Mexico or Canada. Note: Because this tool does not include roadway data for Mexico or Canada, the tool may under predict proximity to major roads for receptor point locations in the US near a border with Mexico or Canada with nearby major roads across the border. This tool provides optional output information indicating whether a receptor point is located within a specified distance of a border. Outline of steps Step 1. Install R and required packages Step 2. Download tool Step 3. Prepare receptor point data Step 4. Run script in R Step 5. Review output     0.0.0.1 Step 1. Install R and required packages Install R. Optionally, install RStudio. Then, install the following R packages: logr, tidyverse, sf. Follow R package installation instructions, or run the following code in R: install.packages(c(&quot;logr&quot;, &quot;tidyverse&quot;, &quot;sf&quot;))     0.0.0.2 Step 2. Download tool Download and save the folder containing input data (input_source_major_roads.rds and input_us_borders.rds) and script (script_major_road_proximity_for_points.R). To directly run the example scripts provided with these instructions in Step 4, do not change the file names within the folder.     0.0.0.3 Step 3. Prepare receptor point data Prepare a comma-separated values (CSV) file that contains a table of the receptor point locations (e.g., geocoded addresses, coordinates). Include each receptor as a separate row in the table, and include the following required columns: id: a unique and anonymous identifying code for each receptor. This can be in character (string) or numeric (double) format latitude: the latitude of the receptor point location in decimal degrees format (range: -90 to 90) longitude: the longitude of the receptor point location in decimal degrees format (range: -180 to 180) The following table provides an example of the receptor point data format: id latitude longitude 1011A 39.00205369 -77.105578716 1012C 35.88480215 -78.877942573 1013E 39.43560788 -77.434847823 To directly run the example scripts provided with these instructions, save the receptor point data as input_receptor.csv in the folder.     0.0.0.4 Step 4. Run script in R Run the script script_major_road_proximity_for_points.R to load the required functions in R. You can then use the function get_major_road_proximity_for_points() to calculate proximity-based exposure metrics for each receptor point location.     0.0.0.4.1 Description of function get_major_road_proximity_for_points() This function takes the receptor point data above and returns a data frame with the receptor identifying code linked to the selected major road facility proximity metrics for selected raod class(es) as well as information about data missingness. Optionally, the function also writes a log file in the current R working directory. The function has the following arguments: Required arguments receptor_filepath: specifies the file path to a CSV file containing the receptor point locations (described in Step 3). Note: The format for file paths in R can vary by operating system. source_major_roads_filepath: specifies the file path to a RDS file containing a simple features object with the line locations of NASA SEDAC major roads in the US. This is the file input_source_major_roads.rds. us_borders_filepath: specifies the file path to a RDS file containing a simple features object with the US borders with Mexico and Canada. This is the file input_us_borders.rds. Optional arguments buffer_distance_km: a numeric argument that specifies the buffer distance (units: kilometers [km]) to use in calculation of buffer-based proximity metrics. Default is 1 km. Must be between 0.001 km and 1000 km. Note: Larger buffer distance values may result in longer run-times for buffer-based proximity metrics. receptor_crs: a coordinate reference system object (i.e., class is crs object in R) for the receptor point locations. Default is \"EPSG:4269\" (i.e., NAD83). projection_crs: a projected coordinate reference system object (i.e., class is crs object in R) for use in exposure assessment. Default is \"ESRI:102008\" (i.e., North America Albers Equal Area Conic projection). road_class_selection: list that specifies the subset of major road types to include in the exposure assessment. Default is all types: \"highway\", \"primary road\", \"secondary road\", \"unspecified\". proximity_metrics: list that specifies the subset of proximity-based exposure metrics to calculate. Default is all metrics: \"distance_to_nearest, \"length_in_buffer\". \"distance_to_nearest\": returns output with distance to nearest major road (units: km) and classification of nearest major road (e.g., highway) for each receptor \"length_in_buffer\": returns output with the length (units: km) of all major roads of the selected class(es) within the specified buffer distance of receptor check_near_us_border: logical argument that specifies whether the function should identify receptor points that are within the buffer distance (i.e., specified by argument buffer_distance_km) of a US border with Canada or Mexico. TRUE returns a column with output (within_border_buffer) with a binary variable indicating receptor points within the buffer distance of a border. Default is TRUE. Note: This tool includes only road data for US states and territories. Thus, this tool may under predict proximity to major roads for receptor locations near a US border with Canada or Mexico. add_all_input_to_output: logical argument that specifies whether the output of the function should include all columns included with the input receptor data frame or not. TRUE returns all columns (i.e., including latitude and longitude) with output. FALSE returns only the anonymous receptor identifying code, proximity-based metrics, and data missingness information with output. FALSE may be useful for meeting data de-identification requirements. Default is TRUE. write_log_to_file: logical argument that specifies whether a log should be written to file. TRUE will create a log file in the current working directory. Default is TRUE. print_log_to_console: logical argument that specifies whether a log should be printed to the console. TRUE will print a log to console. Default is TRUE.     0.0.0.4.2 Example use Below are two example scripts for using the function above to produce a CSV file with the proximity-based exposure estimates for each receptor to highways (using default options for all other optional arguments). The first example uses only R but requires editing the file paths. The second example requires RStudio and the here package but does not require editing file paths. Example 1: Base R # Load packages library(tidyverse) library(logr) library(sf) # Load functions source(&quot;/set/file/path/to/script_major_road_proximity_for_points.R&quot;) # Get proximity-based exposures major_road_proximity_metrics &lt;- get_major_road_proximity_for_points( receptor_filepath = &quot;/set/file/path/to/input_receptor.csv&quot;, source_major_roads_filepath = &quot;/set/file/path/to/input_source_major_roads.rds&quot;, us_borders_filepath = &quot;/set/file/path/to/input_us_borders.rds&quot;, road_class_selection = &quot;highway&quot;) # Write exposures to CSV readr::write_csv(major_road_proximity_metrics, file =&quot;/set/file/path/to/output_major_road_proximity_metrics.csv&quot;) Example 2: RStudio with here package # Install here package (if needed) install.packages(&quot;here&quot;) # Load packages library(here) library(tidyverse) library(logr) library(sf) # Set location here::i_am(&quot;script_major_road_proximity_for_points.R&quot;) # Load functions source(here::here(&quot;script_major_road_proximity_for_points.R&quot;)) # Get exposures major_road_proximity_metrics &lt;- get_major_road_proximity_for_points( receptor_filepath = here(&quot;input_receptor.csv&quot;), source_major_roads_filepath = here(&quot;input_source_major_roads.rds&quot;), us_borders_filepath = here(&quot;input_us_borders.rds&quot;), road_class_selection = &quot;highway&quot;) # Write exposures to CSV readr::write_csv(major_road_proximity_metrics, file = here(&quot;output_major_road_proximity_metrics.csv&quot;))     0.0.0.5 Step 5. Review output 0.0.0.5.1 Log file After running the example script above, with the log file option selected, the log file will be available in the folder log in the current R working directory.     0.0.0.5.2 Output data After running the example script above, calculated proximity-based exposure metrics for receptor locations will be available in the file output_major_road_proximity_metrics.csv within the folder. This CSV file includes a row for each receptor with the following columns (as applicable): Identifiers id: the unique and anonymous identifying code for each receptor Calculated proximity-based exposure metrics Nearest distance metrics major_road_nearest_distance_km: distance (units: km) to the nearest major road major_road_nearest_road_class: the classification of the nearest major road segment. Length in buffer metrics major_road_length_in_buffer_km: length (units: km) of all major roads of the specified class(es) within the specified buffer distance of receptor. 0 indicates that no major roads are within the specified buffer distance of the receptor. Information on data missingness within_border_buffer: binary variable indicating whether receptor point is located within the buffer distance (i.e., specified by argument buffer_distance_km) of a US border with Canada or Mexico: 1 indicates that receptor point is located within the buffer distance of a US border with Canada or Mexico. This indicates that the proximity-based metrics calculated by this tool may represent under predictions of the true proximity-based metrics (i.e., the nearest major road may be located in Canada or Mexico, outside the coverage of the major road data included in this tool). 0 indicates that receptor point is not located within the buffer distance of a US border with Canada or Mexico.     0.0.0.6 Step 6. Cite data and tool Please cite the following in any publications based on this tool: Major roads data: Center for International Earth Science Information Network - CIESIN - Columbia University, and Information Technology Outreach Services - ITOS - University of Georgia. (2013). Global Roads Open Access Data Set, Version 1 (gROADSv1). Palisades, New York: NASA Socioeconomic Data and Applications Center (SEDAC). [Available: https://doi.org/10.7927/H4VD6WCT.] Accessed October 24, 2022. US borders: Homeland Infrastructure Foundation-Level Data (HIFLD) Geoplatform. Canada and US border geospatial data. [Available: https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::canada-and-us-border/about]. Accessed: June 23, 2022. Homeland Infrastructure Foundation-Level Data (HIFLD) Geoplatform. Mexico and US border geospatial data. [Available: https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::mexico-and-us-border/about]. Accessed: June 23, 2022. NIEHS geospatial toolbox: Citation to be determined.     Aircraft landing facility proximity metrics Instructions: Aircraft landing facility proximity metrics The following are step-by-step instructions to calculate proximity-based exposure metrics to aircraft landing facilities in the United States (US) using Federal Aviation Administration (FAA) aircraft landing facility data. FAA aircraft landing facility data The FAA aircraft landing facility data includes a registry of point locations (i.e., coordinates) of arrival and departure of aircraft in the US. FAA provides the following categorization of aircraft landing facility types: airports, heliports, seaplane bases, gliderports, ultralights, and balloonports. FAA also provides the activation year for facilities starting in year 1981. The following figure illustrates the spatial coverage (all US states) and spatial scale (points) of the FAA aircraft landing facility data: Illustration of FAA aircraft facility data (a) spatial coverage (United States, including Alaska and Hawaii (not shown)) and (b) spatial scale (points). Exposure metrics This tool calculates proximity-based (i.e., distance-based) exposure metrics for a specified list of receptor point locations (e.g., geocoded home addresses) to aircraft landing facilities in a specified year (during 1981-2020). This tool can be used to calculate the following proximity-based metrics within the US: distance to nearest aircraft landing facility and identity of nearest aircraft landing facility (i.e., identifying codes, facility type, and activation year) count of aircraft landing facilities within a specified buffer distance of receptor summary metrics of distances to all aircraft landing facilities within a specified buffer distance of receptor (i.e., mean distance, mean of logarithm distance, and 25th, 50th, and 75th percentile distances) Proximity metrics can be calculated for all FAA aircraft landing facility types (i.e., airports, heliports, seaplane bases, gliderports, ultralights, and balloonports) or any subset of them. Output includes information about data missingness (e.g., whether a receptor location is near a US border) as well as an optional log file. Recommended uses This tool is recommended for the following uses: applications for which a proximity-based metric is appropriate. Note: This tool does not provide other relevant exposure information associated with aircraft landing facilities, such as traffic (e.g., annual count of arrivals/departures), noise levels, or air pollution levels. applications for which most receptor point locations are not located near to a US border with Mexico or Canada. Note: Because this tool does not include aircraft landing facility data for Mexico or Canada, the tool may under predict proximity to aircraft landing facilities for receptor point locations in the US near a border with Mexico or Canada with nearby aircraft landing facilities across the border. This tool provides optional output information indicating whether a receptor point is located within a specified distance of a border. Outline of steps Step 1. Install R and required packages Step 2. Download tool Step 3. Prepare receptor point data Step 4. Run script in R Step 5. Review output     0.0.0.7 Step 1. Install R and required packages Install R. Optionally, install RStudio. Then, install the following R packages: logr, tidyverse, sf. Follow R package installation instructions, or run the following code in R: install.packages(c(&quot;logr&quot;, &quot;tidyverse&quot;, &quot;sf&quot;))     0.0.0.8 Step 2. Download tool Download and save the folder containing input data (input_source_aircraft_facilities.rds and input_us_borders.rds) and script (script_aircraft_facility_proximity_for_points.R). To directly run the example scripts provided with these instructions in Step 4, do not change the file names within the folder.     0.0.0.9 Step 3. Prepare receptor point data Prepare a comma-separated values (CSV) file that contains a table of the receptor point locations (e.g., geocoded addresses, coordinates). Include each receptor as a separate row in the table, and include the following required columns: id: a unique and anonymous identifying code for each receptor. This can be in character (string) or numeric (double) format latitude: the latitude of the receptor point location in decimal degrees format (range: -90 to 90) longitude: the longitude of the receptor point location in decimal degrees format (range: -180 to 180) The following table provides an example of the receptor point data format: id latitude longitude 1011A 39.00205369 -77.105578716 1012C 35.88480215 -78.877942573 1013E 39.43560788 -77.434847823 To directly run the example scripts provided with these instructions, save the receptor point data as input_receptor.csv in the folder.     0.0.0.10 Step 4. Run script in R Run the script script_aircraft_facility_proximity_for_points.R to load the required functions in R. You can then use the function get_aircraft_facility_proximity_for_points() to calculate proximity-based exposure metrics for each receptor point location.     0.0.0.10.1 Description of function get_aircraft_facility_proximity_for_points() This function takes the receptor point data above and returns a data frame with the receptor identifying code linked to the selected aircraft landing facility proximity metrics for selected aircraft landing facility types and year (during 1981 to 2020) as well as information about data missingness. Optionally, the function also writes a log file in the current R working directory. The function has the following arguments: Required arguments receptor_filepath: specifies the file path to a CSV file containing the receptor point locations (described in Step 3). Note: The format for file paths in R can vary by operating system. source_aircraft_facilities_filepath: specifies the file path to a RDS file containing a simple features object with the point locations of FAA aircraft landing facilities. This is the file input_source_aircraft_facilities.rds. us_borders_filepath: specifies the file path to a RDS file containing a simple features object with the US borders with Mexico and Canada. This is the file input_us_borders.rds. aircraft_year: specifies a single year (in YYYY format; e.g., 2003) for proximity-based exposure assessment across all pollutants. Default is NULL. Year must be during 1981 to 2020. Aircraft landing facilities activated after aircraft_year will be excluded from calculation of the proximity metrics. Optional arguments buffer_distance_km: a numeric argument that specifies the buffer distance (units: kilometers [km]) to use in calculation of buffer-based proximity metrics. Default is 10 km. Must be between 0.001 km and 1000 km. Note: Larger buffer distance values may result in longer run-times for buffer-based proximity metrics. receptor_crs: a coordinate reference system object (i.e., class is crs object in R) for the receptor point locations. Default is \"EPSG:4269\" (i.e., NAD83). projection_crs: a projected coordinate reference system object (i.e., class is crs object in R) for use in exposure assessment. Default is \"ESRI:102008\" (i.e., North America Albers Equal Area Conic projection). aircraft_facility_type: list that specifies the subset of FAA aircraft landing facility types to include in the exposure assessment. Default is all types: \"airport\", \"heliport\", \"seaplane base\", \"gliderport\", \"ultralight\", \"balloonport\". proximity_metrics: list that specifies the subset of proximity-based exposure metrics to calculate. Default is all metrics: \"distance_to_nearest, \"count_in_buffer\", \"distance_in_buffer\". \"distance_to_nearest\": returns output with distance to nearest aircraft landing facility (units: km) and identity of nearest aircraft landing facility (i.e., identifying codes, facility type, and activation year) for each receptor \"count_in_buffer\": returns output with count of aircraft landing facilities within a specified buffer distance of each receptor \"distance_in_buffer\": returns output with summary metrics of distances to all aircraft landing facilities within the specified buffer distance of receptor (i.e., mean distance, mean of logarithm distance, and 25th, 50th, and 75th percentile distances to all aircraft landing facilities for each receptor) check_near_us_border: logical argument that specifies whether the function should identify receptor points that are within the buffer distance (i.e., specified by argument buffer_distance_km) of a US border with Canada or Mexico. TRUE returns a column with output (within_border_buffer) with a binary variable indicating receptor points within the buffer distance of a border. Default is TRUE. Note: The aircraft landing facility data covers only facilities located within the US. Thus, this tool may under predict proximity to aircraft landing facilities for receptor locations near a US border with Canada or Mexico. add_all_input_to_output: logical argument that specifies whether the output of the function should include all columns included with the input receptor data frame or not. TRUE returns all columns (i.e., including latitude and longitude) with output. FALSE returns only the anonymous receptor identifying code, proximity-based metrics, and data missingness information with output. FALSE may be useful for meeting data de-identification requirements. Default is TRUE. write_log_to_file: logical argument that specifies whether a log should be written to file. TRUE will create a log file in the current working directory. Default is TRUE. print_log_to_console: logical argument that specifies whether a log should be printed to the console. TRUE will print a log to console. Default is TRUE.     0.0.0.10.2 Example use Below are two example scripts for using the function above to produce a CSV file with the proximiity-based exposure estimates for each receptor to airports in year 2020 (using default options for all other optional arguments). The first example uses only R but requires editing the file paths. The second example requires RStudio and the here package but does not require editing file paths. Example 1: Base R # Load packages library(tidyverse) library(logr) library(sf) # Load functions source(&quot;/set/file/path/to/script_aircraft_facility_proximity_for_points.R&quot;) # Get exposures aircraft_proximity_metrics &lt;- get_aircraft_facility_proximity_for_points( receptor_filepath = &quot;/set/file/path/to/input_receptor.csv&quot;, source_aircraft_facilities_filepath = &quot;/set/file/path/to/input_source_aircraft_facilities.rds&quot;, us_borders_filepath = &quot;/set/file/path/to/input_us_borders.rds&quot;, aircraft_year = 2020, aircraft_facility_type = &quot;airport&quot;) # Write exposures to CSV readr::write_csv(aircraft_proximity_metrics, file =&quot;/set/file/path/to/output_aircraft_proximity_metrics.csv&quot;) Example 2: RStudio with here package # Install here package (if needed) install.packages(&quot;here&quot;) # Load packages library(here) library(tidyverse) library(logr) library(sf) # Set location here::i_am(&quot;script_aircraft_facility_proximity_for_points.R&quot;) # Load functions source(here::here(&quot;script_aircraft_facility_proximity_for_points.R&quot;)) # Get exposures aircraft_proximity_metrics &lt;- get_aircraft_facility_proximity_for_points( receptor_filepath = here(&quot;input_receptor.csv&quot;), source_aircraft_facilities_filepath = here(&quot;input_source_aircraft_facilities.rds&quot;), us_borders_filepath = here(&quot;input_us_borders.rds&quot;), aircraft_year = 2020, aircraft_facility_type = &quot;airport&quot;) # Write exposures to CSV readr::write_csv(aircraft_proximity_metrics, file = here(&quot;output_aircraft_proximity_metrics.csv&quot;))     0.0.0.11 Step 5. Review output 0.0.0.11.1 Log file After running the example script above, with the log file option selected, the log file will be available in the folder log in the current R working directory.     0.0.0.11.2 Output data After running the example script above, calculated proximity-based exposure metrics for receptor locations will be available in the file output_aircraft_proximity_metrics.csv within the folder. This CSV file includes a row for each receptor with the following columns (as applicable): Identifiers id: the unique and anonymous identifying code for each receptor Calculated proximity-based exposure metrics Nearest distance metrics aircraft_nearest_distance_km: distance (units: km) to the nearest aircraft landing facility aircraft_nearest_id_site_num: the unique identifying FAA site number for the nearest aircraft landing facility. Consists of a numeric code followed by a letter indicating the aircraft landing facility type. For example, the site number for the Los Angeles International Airport is 01818.*A. The FAA site number can be used to link additional types of FAA data (e.g., annual operations) for further analyses. aircraft_nearest_id_loc: the unique identifying location code for the nearest aircraft landing facility. Consists of a 3 or 4 character alphanumeric code. For example, the location code for the Los Angeles International Airport is LAX. The location code can be used to link additional types of FAA data (e.g., annual operations) for further analyses. aircraft_nearest_fac_type: the type (i.e., airport, heliport, seaplane base, gliderport, ultralight, and balloonport) of the nearest aircraft landing facility aircraft_nearest_year_activation: the year of activation of the nearest aircraft landing facility. Activation year is available for all facilities starting in 1981. Count in buffer metrics aircraft_count_in_buffer: number of aircraft landing facilities within the specified buffer distance of each receptor Distance in buffer metrics aircraft_mean_distance_in_buffer: mean of distances (units: km) to all aircraft landing facilities within the specified buffer distance of receptor. NA indicates that no landing facilities are within the specified buffer distance of the receptor. Note: In cases with exactly one aircraft landing facility within the specified buffer distance, the value will be the distance to that aircraft landing facility. aircraft_log_mean_distance_in_buffer: mean of logarithm of distances (units: km) to all aircraft landing facilities within the specified buffer distance of receptor. NA indicates that no landing facilities are within the specified buffer distance of the receptor. Note: In cases with exactly one aircraft landing facility within the specified buffer distance, the value will be the logarithm of the distance to that aircraft landing facility. aircraft_p25_distance_in_buffer: 25th percentile of distances (units: km) to all aircraft landing facilities within the specified buffer distance of receptor, for cases with at least 10 aircraft landing facilities within the buffer distance. NA indicates that less than 10 aircraft landing facilities are within the buffer distance. aircraft_p50_distance_in_buffer: 50th percentile (i.e., median) of distances (units: km) to all aircraft landing facilities within the specified buffer distance of receptor, for cases with at least 10 aircraft landing facilities within the buffer distance. NA indicates that less than 10 aircraft landing facilities are within the buffer distance. aircraft_p75_distance_in_buffer: 75th percentile of distances (units: km) to all aircraft landing facilities within the specified buffer distance of receptor, for cases with at least 10 aircraft landing facilities within the buffer distance. NA indicates that less than 10 aircraft landing facilities are within the buffer distance. Information on data missingness within_border_buffer: binary variable indicating whether receptor point is located within the buffer distance (i.e., specified by argument buffer_distance_km) of a US border with Canada or Mexico: 1 indicates that receptor point is located within the buffer distance of a US border with Canada or Mexico. This indicates that the proximity-based metrics calculated by this tool may represent under predictions of the true proximity-based metrics (i.e., the nearest aircraft landing facility may be located in Canada or Mexico, outside the coverage of the US aircraft landing facility dataset). 0 indicates that receptor point is not located within the buffer distance of a US border with Canada or Mexico.     0.0.0.12 Step 6. Cite data and tool Please cite the following in any publications based on this tool: Aircraft landing facility data: US Federal Aviation Administration (FAA). Airport Data and Information Portal (ADIP). [Available: https://adip.faa.gov/agis/public/#/airportSearch/advanced]. Accessed: April 24, 2022. Homeland Infrastructure Foundation-Level Data (HIFLD) Geoplatform. Aircraft landing facilities geospatial data. [Available: https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::aircraft-landing-facilities/about]. Accessed: June 23, 2022. US borders: Homeland Infrastructure Foundation-Level Data (HIFLD) Geoplatform. Canada and US border geospatial data. [Available: https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::canada-and-us-border/about]. Accessed: June 23, 2022. Homeland Infrastructure Foundation-Level Data (HIFLD) Geoplatform. Mexico and US border geospatial data. [Available: https://hifld-geoplatform.opendata.arcgis.com/datasets/geoplatform::mexico-and-us-border/about]. Accessed: June 23, 2022. NIEHS geospatial toolbox: Citation to be determined.     Air pollution exposure Instructions: Air pollution exposure metrics from CACES model The following are step-by-step instructions to calculate annual average air pollution exposure metrics using the Center for Air, Climate, &amp; Energy Solutions (CACES) land use regression models (Version 1.0). CACES air pollution models The CACES models are based on air pollution observations from United States (US) Environmental Protection Agency monitors and from satellites, as well as land cover and land use information (e.g., locations of roadways). CACES model predictions cover populated locations in the contiguous US (i.e., in the 48 contiguous states plus the District of Columbia) at the spatial resolution of US census tracts, for the following air pollutants and time-periods: Air pollutant Units Exposure metric Available years carbon monoxide (CO) ppm annual average concentration 1990-2015 nitrogen dioxide (NO2) ppb annual average concentration 1979-2015 ozone (O3) ppb May through September average of daily moving 8-hour maximum average concentration 1979-2015 particulate matter (PM2.5) µg m-3 annual average concentration 1999-2015 particulate matter (PM10) µg m-3 annual average concentration 1988-2015 sulfur dioxide (SO2) ppb annual average concentration 1979-2015 The following figure illustrates the spatial coverage (contiguous US) and spatial resolution (census tracts) for a single pollutant and time-period (NO2 in 2015): Illustration of CACES data (a) spatial coverage (contiguous United States) and (b) spatial scale (census tracts). Exposure metrics This tool calculates long-term average air pollution exposure metrics for a specified list of receptor point locations (e.g., geocoded home addresses) during a specified time-period in years. This tool can be used to calculate average exposure metrics: for a single year or single range of years that is constant across all receptor locations (e.g., 2002, 2010 to 2015) for a single year or range of years that varies across receptor locations (e.g., year of birth, years of residence at geocoded home address) Exposure metrics can be calculated for all CACES pollutants or any subset of them. Output includes information about data missingness (e.g., whether a specified receptor point is located outside the coverage of the CACES data) as well as an optional log file. Recommended uses This tool is recommended for the following uses: comparisons of exposures across larger geographic regions in the contiguous US (e.g., across a metropolitan area or state). Note: This tool is based on census tract level air pollution model data and cannot be used to compare exposures for different locations within the same census tract. comparisons of exposures incorporating multiple pollutants and/or years in a consistent manner analyses focused on long-term average (e.g., annual average, multi-year average) exposures to air pollution Outline of instructions Step 1. Install R and required packages Step 2. Download tool Step 3. Prepare receptor point data Step 4. Run script in R Step 5. Review output Step 6. Cite data and tool     0.0.0.13 Step 1. Install R and required packages Install R. Optionally, install RStudio. Then, install the following R packages: logr, tidyverse, sf. Follow R package installation instructions, or run the following code in R: install.packages(c(&quot;logr&quot;, &quot;tidyverse&quot;, &quot;sf&quot;))     0.0.0.14 Step 2. Download tool Download and save the folder containing input data (input_source_caces.rds and input_census_tracts_2010.rds) and script (script_caces_exposures_for_points.R). To directly run the example scripts provided with these instructions in Step 4, do not change the file names within the folder.     0.0.0.15 Step 3. Prepare receptor point data Prepare a comma-separated values (CSV) file that contains a table of the receptor point locations (e.g., geocoded addresses, coordinates). Include each receptor as a separate row in the table, and include the following required columns: id: a unique and anonymous identifying code for each receptor. This can be in character (string) or numeric (double) format. id must be unique across all rows in the receptor point location table. It is not possible to use the same id for different time-points or locations within the same receptor point location table. latitude: the latitude of the receptor point location in decimal degrees format (range: -90 to 90) longitude: the longitude of the receptor point location in decimal degrees format (range: -180 to 180) To calculate exposure metrics for time-periods (year or range of years) that vary across the receptors (e.g., years of residence at geocoded addresses), include both of the following optional columns: time_start: the first year of the time-period in “YYYY” format (e.g., 2002 for year 2002) time_end: the last year of the time-period in “YYYY” format (e.g., 2003 for year 2003) Note: To calculate exposure metrics for a single year that varies across the receptors, provide the same year for both time_start and time_end for each receptor. To calculate exposure metrics for a range of years that is constant across the receptors, provide the start year of the range as time_start for all receptors and the end year of the range as time_end for all receptors. To calculate exposure metrics for a single year that is constant across all receptors, specify year for exposure assessment using argument caces_year. If both caces_year and time_start and time_end are provided, the exposure assessment will be based on caces_year (ignoring time_start and time_end). The following table provides an example of the receptor point data format: id latitude longitude time_start time_end 1011A 39.00205369 -77.105578716 2002 2011 1012C 35.88480215 -78.877942573 2014 2015 1013E 39.43560788 -77.434847823 1990 1990 To directly run the example scripts provided with these instructions, save the receptor point data as input_receptor.csv in the folder.     0.0.0.16 Step 4. Run script in R Run the script script_caces_exposures_for_points.R to load the required functions in R. You can then use the function get_caces_for_points() to calculate the mean CACES model pollutant concentrations for the selected time period (in years) for each receptor point location.     0.0.0.16.1 Description of function get_caces_for_points() This function takes the receptor point data above and returns a data frame with the receptor id linked to the exposure estimates for selected pollutants and time periods as well as information about data missingness. Optionally, the function also writes a log file in the current R working directory. The function has the following arguments: Required arguments receptor_filepath: specifies the file path to a CSV file containing the receptor point locations (described in Step 3). Note: The format for file paths in R can vary by operating system. source_caces_filepath: specifies the file path to a RDS file containing a data frame with the CACES air pollution estimates by census tract. This is the file input_source_caces.rds. source_census_tracts_2010_filepath: specifies the file path to a RDS file containing the simple features with the 2010 census tracts for the US. This is the file input_census_tracts_2010.rds. Optional arguments receptor_crs: a coordinate reference system object (i.e., class is crs object in R) for the receptor point locations. Default is “EPSG:4269” (i.e., NAD83). caces_pollutants: list that specifies the subset of CACES pollutants to include. Default is all pollutants: \"co\", \"no2\", \"o3\", \"pm10\", \"pm25\", \"so2\". caces_year: specifies a single year (in “YYYY” format; e.g., 2003) for exposure assessment across all pollutants and receptors. Default is NULL. caces_year is required to be specified if time_start and time_end are not provided with the receptor point data. If both caces_year and time_start and time_end are provided, exposure assessment will be based on the single year specified by caces_year (i.e., ignoring time_start and time_end). caces_year must be NULL if using time_start and time_end to specify year(s) that vary across receptor points for exposure assessment. caces_year must be during 1999-2015 to return exposure estimates for all six pollutants, or during 1979-2015 for O3, NO2, and SO2, 1988-2015 for PM10, 1990-2015 for CO, or 1999-2015 for PM2.5. add_all_input_to_output: logical argument that specifies whether the output should include all columns included with receptor point locations (described in Step 3). TRUE returns all columns (i.e., including any time information and census tract identifying code) with output. FALSE returns only the anonymous receptor identifying code, exposure estimates, and data missingness flags with output. FALSE may be useful for meeting data de-identification requirements. Default is TRUE. write_log_to_file: logical argument that specifies whether a log should be written to file. TRUE will create a log file in the current working directory. Default is TRUE. print_log_to_console: logical argument that specifies whether a log should be printed to the console. TRUE will print a log to console. Default is TRUE.     0.0.0.16.2 Example use Below are two example scripts for using the function above to produce a CSV file with the CACES exposure estimates for each receptor point for ozone and nitrogen dioxide in year 2015 (using default options for all other optional arguments). The first example uses only R but requires editing the file paths. The second example requires RStudio and the here package but does not require editing file paths. Example 1: Base R # Load packages library(tidyverse) library(logr) library(sf) # Load functions source(&quot;/set/file/path/to/script_caces_exposures_for_points.R&quot;) # Get exposures caces_exposures &lt;- get_caces_for_points( receptor_filepath = &quot;/set/file/path/to/input_receptor.csv&quot;, source_caces_filepath = &quot;/set/file/path/to/input_source_caces.rds&quot;, source_census_tracts_2010_filepath = &quot;/set/file/path/to/input_census_tracts_2010.rds&quot;, caces_year = 2015, caces_pollutants = c(&quot;o3&quot;, &quot;no2&quot;)) # Write exposures to CSV readr::write_csv(caces_exposures, file =&quot;/set/file/path/to/output_caces_exposures.csv&quot;) Example 2: RStudio with here package # Install here package (if needed) install.packages(&quot;here&quot;) # Load packages library(here) library(tidyverse) library(logr) library(sf) # Set location here::i_am(&quot;script_caces_exposures_for_points.R&quot;) # Load functions source(here::here(&quot;script_caces_exposures_for_points.R&quot;)) # Get exposures caces_exposures &lt;- get_caces_for_points(receptor_filepath = here(&quot;input_receptor.csv&quot;), source_caces_filepath = here(&quot;input_source_caces.rds&quot;), source_census_tracts_2010_filepath = here(&quot;input_census_tracts_2010.rds&quot;), caces_year = 2015, caces_pollutants = c(&quot;o3&quot;, &quot;no2&quot;)) # Write exposures to CSV readr::write_csv(caces_exposures, file = here(&quot;output_caces_exposures.csv&quot;))     0.0.0.17 Step 5. Review output 0.0.0.17.1 Log file After running the example script above, with the log file option selected, the log file will be available in the folder log in the current R working directory.     0.0.0.17.2 Output data After running the example script above, calculated exposure metrics for receptor locations will be available in the file output_caces_exposure.csv within the folder. This CSV file includes a row for each receptor with the following columns (as applicable): Identifiers id: the unique and anonymous identifying code for each receptor fips_tr_10: the identifying code (FIPS code) for the year 2010 census tract Calculated exposure metrics co: mean CACES model predicted concentration of outdoor annual average carbon monoxide (CO) air pollution (units: parts per million [ppm]) for the census tract that contains the receptor point location during the specified year(s) no2: mean CACES model predicted concentration of outdoor annual average nitrogen dioxide (NO2) air pollution (units: parts per billion [ppb]) for the census tract that contains the receptor point location during the specified year(s) o3: mean CACES model predicted concentration of outdoor annual average ozone (O3) air pollution (units: parts per billion [ppb]) for the census tract that contains the receptor point location during the specified year(s) pm25: mean CACES model predicted concentration of outdoor annual average particulate matter (PM2.5) air pollution (units: micrograms per cubic meter [µg m-3]) for the census tract that contains the receptor point location during the specified year(s) pm10: mean CACES model predicted concentration of outdoor annual average particulate matter (PM10) air pollution (units: micrograms per cubic meter [µg m-3]) for the census tract that contains the receptor point location during the specified year(s) so2: mean CACES model predicted concentration of outdoor annual average sulfur dioxide (SO2) air pollution (units: parts per billion [ppb]) for the census tract that contains the receptor point location during the specified year(s) Information on data missingness caces_flag_01: binary variable indicating whether the receptor point is located within a year 2010 US census tract: 1 indicates that receptor point is not located within a year 2010 US census tract. All exposure metrics for that receptor point will be reported as NA. 0 indicates that receptor point is located within a year 2010 US census tract caces_flag_02: binary variable indicating whether receptor point is located within a year 2010 US census tract but outside the spatial coverage of the CACES air pollution model: 1 indicates receptor point is located within a year 2010 US census tract but outside the spatial coverage of the CACES air pollution model. Examples include tracts in Alaska, Hawaii, or US territories, and tracts with no population recorded in the 2010 Decennial Census. All exposure metrics for that receptor point will be reported as NA. 0 indicates that receptor point is located within a year 2010 census tract within coverage of the CACES air pollution model caces_flag_03: binary variable indicating whether the specified time period for that receptor point is completely outside the coverage of the CACES air pollution model: 1 indicates that the specified time (year(s)) for that receptor point is completely outside the temporal coverage of CACES air pollution model for one or more of the selected pollutants. Exposure metrics will be reported as NA for one or more of the selected pollutants. 0 indicates that the specified time (year(s)) for that receptor point is not completely outside the temporal coverage of CACES air pollution model for any of the selected pollutants caces_flag_04: binary variable indicating whether the specified time-period (year(s)) for that receptor point is partly outside the temporal coverage of CACES air pollution model for one or more of the selected pollutants. 1 indicates that the the specified time-period (year(s)) for that receptor point is partly outside the temporal coverage of CACES air pollution model for one or more of the selected pollutants. Exposure metrics will be calculated based on the years with available data for that specified time-period. 0 indicates that the specified time-period (year(s)) for that receptor point is completely within the temporal coverage of CACES air pollution model for all of the selected pollutants.     0.0.0.18 Step 6. Cite data and tool Please cite the following in any publications based on this tool: CACES empirical air pollution models (v1): Kim S.-Y.; Bechle, M.; Hankey, S.; Sheppard, L.; Szpiro, A. A.; Marshall, J. D. 2020. “Concentrations of criteria pollutants in the contiguous U.S., 1979 – 2015: Role of prediction model parsimony in integrated empirical geographic regression.” PLoS ONE 15(2), e0228535. DOI: 10.1371/journal.pone.0228535 Census tract spatial boundaries: Steven Manson, Jonathan Schroeder, David Van Riper, Tracy Kugler, and Steven Ruggles. IPUMS National Historical Geographic Information System: Version 16.0 [Census Tract Shapefiles, 2010]. Minneapolis, MN: IPUMS. 2021. http://doi.org/10.18128/D050.V16.0 Please see the following for additional requirements: https://www.nhgis.org/citation-and-use-nhgis-data NIEHS geospatial toolbox: Citation to be determined.     "],["preparing-date.html", "Preparing Date PM(2.5) vs Patient", " Preparing Date PM(2.5) vs Patient Data Preparation Data set is from Synthetic patient and population health data from the state of Massachusetts Download complete patients FHIR file from https://synthea.mitre.org/downloads 22G zip tar Developed python fhir_dataset.py to pull the patients information : patientid, lat, lon, birthdate, gender , start_date_time, end_date_time, code, code_display, start_date, end_date Total patients: 1 million patients sample result: ran synthea_1m_fhir_3_0_May_24/output_12 code =183478001 output file : patient_encounts_bycode_v2_12.csv QC dataset. for instance : start date &gt; end date ; misplace birth/death date to hospital stay date Using the start/end date from patients file run DeGauss pm2.5 model https://degauss.org/pm/ input file for pm2.5 from step 2 command line:docker run –rm -v $PWD:/tmp ghcr.io/degauss-org/pm:0.2.0 tmp/yourdatafile.csv The following columns been added for each row: pm_pred : predicted PM2.5 (micrograms per cubic meter) pm_se : standard error for predicted PM2.5 Output file: patient_encounts_bycode_v2_12_pm_0.2.0.csv The output file will contain one row per day between start_date and end_date for everyone. Lat(latitude) and lon (longitude) location. This means that the output file will likely contain many more rows than the input file Run deGUAUSS census block group : https://degauss.org/census_block_group/ Produced a file with additional columns: • census_block_group_id_2010: identifier for 2010 block group • census_tract_id_2010: identifier for 2010 tract Output file: patient_encounts_bycode_v2_12_pm_0.2.0_census_block_group_0.6.0_2010.csv rename to:ms_patient_pm_census_v2.csv library(readr) df &lt;- read_csv(&quot;./dataset/ms_patient_pm_census_v2.csv&quot;,show_col_types = FALSE) dim(df) ## [1] 2979 19 colnames(df) ## [1] &quot;patientid&quot; &quot;lat&quot; ## [3] &quot;lon&quot; &quot;birthdate&quot; ## [5] &quot;gender&quot; &quot;start_date_time&quot; ## [7] &quot;end_date_time&quot; &quot;code&quot; ## [9] &quot;code_display&quot; &quot;start_date&quot; ## [11] &quot;end_date&quot; &quot;date&quot; ## [13] &quot;year&quot; &quot;h3&quot; ## [15] &quot;h3_3&quot; &quot;pm_pred&quot; ## [17] &quot;pm_se&quot; &quot;census_block_group_id_2010&quot; ## [19] &quot;census_tract_id_2010&quot; install packages if(!require(&#39;shiny&#39;) || !require(&#39;tidycensus&#39;) || !require(&#39;tidyverse&#39;) || !require(&#39;viridis&#39;)) { install.packages(c(&quot;shiny&quot;,&quot;tidycensus&quot;,&quot;tidyverse&quot;,&quot;viridis&quot;)) } ## Loading required package: shiny ## Loading required package: tidycensus ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ───────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.2 ✔ purrr 1.0.1 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.2 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ── Conflicts ─────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors ## Loading required package: viridis ## ## Loading required package: viridisLite if(!require(&#39;plotly&#39;)){ install.packages(&quot;plotly&quot;, type = &quot;source&quot;) } ## Loading required package: plotly ## ## Attaching package: &#39;plotly&#39; ## ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## ## The following object is masked from &#39;package:graphics&#39;: ## ## layout if(!require(&#39;ggplot2&#39;)) { install.packages(&#39;ggplot2&#39;) } if(!require(&#39;maps&#39;) || !require(&#39;ggmap&#39;)) { install.packages(c(&quot;maps&quot;,&quot;ggmap&quot;)) } ## Loading required package: maps ## ## Attaching package: &#39;maps&#39; ## The following object is masked from &#39;package:viridis&#39;: ## ## unemp ## The following object is masked from &#39;package:purrr&#39;: ## ## map ## Loading required package: ggmap ## ℹ Google&#39;s Terms of Service: &lt;https://mapsplatform.google.com&gt; ## ℹ Please cite ggmap if you use it! Use `citation(&quot;ggmap&quot;)` for details. ## ## Attaching package: &#39;ggmap&#39; ## ## ## The following object is masked from &#39;package:plotly&#39;: ## ## wind Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. 0.0.1 Load libraries Data wrangling # Check for missing values sum(is.na(df)) ## [1] 514 # If there are missing values, you can drop or fill them as per your requirement df &lt;- na.omit(df) # Drop rows with missing values Change column name for later map colnames(df)[which(names(df) == &quot;lon&quot;)] &lt;- &quot;longitude&quot; colnames(df)[which(names(df) ==&quot;lat&quot;)] &lt;- &quot;latitude&quot; dim(df) ## [1] 2722 19 Filter the rows based on the date range Use the subset() function to filter the rows based on the date range:2010 -2017to match 5 year sensus data filtered_df &lt;- subset(df, date &gt;= as.Date(&quot;2012-01-01&quot;) &amp; date &lt;= as.Date(&quot;2017-09-01&quot;)) dim(filtered_df) ## [1] 2124 19 write.csv(filtered_df,&quot;./dataset/asthma_small.csv&quot;) Combine information for display in tooltip # Combine the required information for hover tooltip into a new column filtered_df$tooltip &lt;- paste(&quot;PM2.5:&quot;, filtered_df$pm_pred, &quot;&lt;br&gt;&quot;, &quot;Hospital Date:&quot;, filtered_df$date, &quot;&lt;br&gt;&quot;, &quot;Patient Info:&quot;, filtered_df$code_display, &quot;&lt;br&gt;&quot;, &quot;gender :&quot;, filtered_df$gender) 0.0.2 Create a Geographical Map Load the required libraries for plotting maps: library(ggplot2) library(maps) library(ggmap) Add map data to the base plot using the map_data() function: # Draw massachusetts map ma_map &lt;- map_data(&quot;state&quot;, region = &quot;massachusetts&quot;) # Create a base plot for Massachusetts p &lt;- ggplot() + geom_polygon(data = ma_map, aes(x = long, y = lat, group = group), fill = &quot;lightgray&quot;, color = &quot;black&quot;) 0.0.3 Plotting the Data Points Plot the data points on the map using the geom_point() function. Specify the longitude and latitude coordinates, and optionally, the color or size of the data points based on the PM2.5 values: Add PM2.5 data points with hover information p &lt;- p + geom_point(data = filtered_df, aes(x = longitude, y = latitude, color = pm_pred, text = tooltip), size = 3) ## Warning in geom_point(data = filtered_df, aes(x = longitude, y = ## latitude, : Ignoring unknown aesthetics: text #you can run this block code on your local to have mouse hover text. for Now it cannot #rander on R-studio connect #Convert the plot to a plotly object # p &lt;- ggplotly(p) %&gt;% # layout(hoverlabel = list(bgcolor = &quot;white&quot;), # hovertemplate = paste( # &quot;&lt;b&gt;%{text}&lt;/b&gt;&quot; # ) # ) Draw the map print(p) "],["census-analysis.html", "Census Analysis Census Income vs Patient The county with hightest income in MA by sensus data 2020", " Census Analysis Census Income vs Patient 0.0.4 Data Preparation Data set is from Synthetic patient and population health data from the state of Massachusetts Download complete patients FHIR file from https://synthea.mitre.org/downloads 22G zip tar Developed python fhir_dataset.py to pull the patients information : patientid, lat, lon, birthdate, gender , start_date_time, end_date_time, code, code_display, start_date, end_date Total patients: 1 million patients sample result: ran synthea_1m_fhir_3_0_May_24/output_12 code =183478001 output file : patient_encounts_bycode_v2_12.csv QC dataset. for instance : start date &gt; end date ; misplace birth/death date to hospital stay date Using the start/end date from patients file run DeGauss pm2.5 model https://degauss.org/pm/ input file for pm2.5 from step 2 command line:docker run –rm -v $PWD:/tmp ghcr.io/degauss-org/pm:0.2.0 tmp/yourdatafile.csv The following columns been added for each row: pm_pred : predicted PM2.5 (micrograms per cubic meter) pm_se : standard error for predicted PM2.5 Output file: patient_encounts_bycode_v2_12_pm_0.2.0.csv The output file will contain one row per day between start_date and end_date for everyone. Lat(latitude) and lon (longitude) location. This means that the output file will likely contain many more rows than the input file Run deGUAUSS census block group : https://degauss.org/census_block_group/ Produced a file with additional columns: • census_block_group_id_2010: identifier for 2010 block group • census_tract_id_2010: identifier for 2010 tract • command line:docker run –rm -v $PWD:/tmp ghcr.io/degauss-org/census_block_group:0.5.0 tmp/yourdatafile.csv Output file: yourdatafile_census_block_group_0.6.0_2010.csv rename to:ms_patient_pm_census_v2.csv install packages if(!require(&#39;shiny&#39;) || !require(&#39;tidycensus&#39;) || !require(&#39;tidyverse&#39;) || !require(&#39;viridis&#39;)) { install.packages(c(&quot;shiny&quot;,&quot;tidycensus&quot;,&quot;tidyverse&quot;,&quot;viridis&quot;)) } if(!require(&#39;plotly&#39;)){ install.packages(&quot;plotly&quot;, type = &quot;source&quot;) } if(!require(&#39;ggplot2&#39;)) { install.packages(&#39;ggplot2&#39;) install.packages(c(&quot;maps&quot;,&quot;ggmap&quot;)) } if(!require(&#39;maps&#39;) || !require(&#39;ggmap&#39;)) { install.packages(c(&quot;maps&quot;,&quot;ggmap&quot;)) } Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. ### Load libraries library(readr) df &lt;- read_csv(&quot;./dataset/ms_patient_pm_census_v2.csv&quot;,show_col_types = FALSE) dim(df) ## [1] 2979 19 colnames(df) ## [1] &quot;patientid&quot; &quot;lat&quot; ## [3] &quot;lon&quot; &quot;birthdate&quot; ## [5] &quot;gender&quot; &quot;start_date_time&quot; ## [7] &quot;end_date_time&quot; &quot;code&quot; ## [9] &quot;code_display&quot; &quot;start_date&quot; ## [11] &quot;end_date&quot; &quot;date&quot; ## [13] &quot;year&quot; &quot;h3&quot; ## [15] &quot;h3_3&quot; &quot;pm_pred&quot; ## [17] &quot;pm_se&quot; &quot;census_block_group_id_2010&quot; ## [19] &quot;census_tract_id_2010&quot; 0.0.5 use case: Apply census api key at https://api.census.gov/data/key_signup.html and then supply the key to the census_api_key() function to use it throughout your tidycensus session. Run r package tidycensus with the api key and the parameters: • income code = “C17002_001”,“C17002_002”,“C17002_003”,“C17002_004”, “C17002_005”,“C17002_006”,“C17002_007”, “C17002_008” • geography = tract • year = 2012 • state = MA • survey = acs5 Create a character vector named income_code containing eight elements. Each element represents a variable code related to income. income_code &lt;- c(&quot;C17002_001&quot;,&quot;C17002_002&quot;,&quot;C17002_003&quot;,&quot;C17002_004&quot;,&quot;C17002_005&quot;,&quot;C17002_006&quot;, &quot;C17002_007&quot;, &quot;C17002_008&quot;) #Assign the result of the get_acs function to the variable tarr. The function retrieves #American Community Survey (ACS) data for the specified geography (tract), variables #(the income_code vector), state (Massachusetts with state code 25), geometry (TRUE to #include spatial information), survey (&quot;acs5&quot;), and year (2012). tarr &lt;- get_acs(geography = &quot;tract&quot;, variables = income_code, state = 25, geometry = FALSE,survey = &quot;acs5&quot;, year = 2012) ## Getting data from the 2008-2012 5-year ACS ## Warning: • You have not set a Census API key. Users without a key are limited to 500 ## queries per day and may experience performance limitations. ## ℹ For best results, get a Census API key at ## http://api.census.gov/data/key_signup.html and then supply the key to the ## `census_api_key()` function to use it throughout your tidycensus session. ## This warning is displayed once per session. #Write the census income data into csv file #modify if (FALSE) to if (TRUE) if you run the first time if (FALSE) { write.csv(tarr,&quot;./dataset/income_MA_mult_incomes.csv&quot;) } tarr column name : • Id – census track id • geoid, • name, • variable, • estimate, • moe Join the patient’s information + degauss pm 2.5 + census block dataset with census income dataset by census track id Data join output file : asthma_patients_pm_2_census_block_group_0.6.0_2010.csv dim(tarr) ## [1] 11824 5 colnames(tarr) ## [1] &quot;GEOID&quot; &quot;NAME&quot; &quot;variable&quot; &quot;estimate&quot; &quot;moe&quot; 0.0.6 Join the dataframes by the census track id df column “census_block_group_id_2010” and tarr column “GEOID” are the census track id. Join these two data frames library(dplyr) #merged_frame &lt;- df %&gt;% # mutate(census_tract_id_2010 = as.character(census_tract_id_2010)) %&gt;% # inner_join(tarr, by = c(&quot;GEOID&quot; = &quot;census_tract_id_2010&quot;)) #left join produce the same result as inner_join left_merged_frame &lt;- df %&gt;% mutate(census_tract_id_2010 = as.character(census_tract_id_2010)) %&gt;% left_join(tarr, by = c(&quot;census_tract_id_2010&quot; = &quot;GEOID&quot; )) ## Warning in left_join(., tarr, by = c(census_tract_id_2010 = &quot;GEOID&quot;)): Detected an unexpected many-to-many relationship between `x` and ## `y`. ## ℹ Row 1 of `x` matches multiple rows in `y`. ## ℹ Row 11769 of `y` matches multiple rows in `x`. ## ℹ If a many-to-many relationship is expected, set `relationship ## = &quot;many-to-many&quot;` to silence this warning. #Write the merged frame data into csv file #modify if (FALSE) to if (TRUE) if you run the first time if (FALSE) { write.csv(left_merged_frame,&quot;./dataset/merged_income_MA_mult_incomes.csv&quot;) } library(dplyr) The county with hightest income in MA by sensus data 2020 # Fetch ACS data for Massachusetts counties ma_counties &lt;- get_acs(geography = &quot;county&quot;, variables = &quot;B19013_001&quot;, state = &quot;MA&quot;, year = 2020) ## Getting data from the 2016-2020 5-year ACS ## Using FIPS code &#39;25&#39; for state &#39;MA&#39; # Sort the data by median household income in descending order ma_counties_sorted &lt;- ma_counties %&gt;% arrange(desc(estimate)) # Extract the county with the highest income highest_income_county &lt;- ma_counties_sorted$NAME[1] # Print the county with the highest income cat(&quot;The county with the highest income in Massachusetts is:&quot;, highest_income_county) ## The county with the highest income in Massachusetts is: Nantucket County, Massachusetts 0.0.7 install packages for the plot if(!require(&#39;maps&#39;) || !require(&#39;ggmap&#39;)) { install.packages(c(&quot;maps&quot;,&quot;ggmap&quot;)) library(maps) library(ggmap) } library(ggplot2) colnames(left_merged_frame) ## [1] &quot;patientid&quot; &quot;lat&quot; ## [3] &quot;lon&quot; &quot;birthdate&quot; ## [5] &quot;gender&quot; &quot;start_date_time&quot; ## [7] &quot;end_date_time&quot; &quot;code&quot; ## [9] &quot;code_display&quot; &quot;start_date&quot; ## [11] &quot;end_date&quot; &quot;date&quot; ## [13] &quot;year&quot; &quot;h3&quot; ## [15] &quot;h3_3&quot; &quot;pm_pred&quot; ## [17] &quot;pm_se&quot; &quot;census_block_group_id_2010&quot; ## [19] &quot;census_tract_id_2010&quot; &quot;NAME&quot; ## [21] &quot;variable&quot; &quot;estimate&quot; ## [23] &quot;moe&quot; 0.0.8 Draw a map with patients and income in color # Draw Massachusetts map ma_map &lt;- map_data(&quot;state&quot;, region = &quot;massachusetts&quot;) #modify column&#39;s name colnames(left_merged_frame)[which(names(left_merged_frame) == &quot;lon&quot;)] &lt;- &quot;longitude&quot; colnames(left_merged_frame)[which(names(left_merged_frame) ==&quot;lat&quot;)] &lt;- &quot;latitude&quot; #Optional Filter the rows based on the date range Use the subset() function to #filter the rows based on the date range:2012 -2017to match 5 year sensus data filtered_df &lt;- subset(left_merged_frame, date &gt;= as.Date(&quot;2012-09-01&quot;) &amp; date &lt;= as.Date(&quot;2017-09-01&quot;)) # Create a base plot for Massachusetts p &lt;- ggplot() + geom_polygon(data = ma_map, aes(x = long, y = lat, group = group), fill = &quot;lightgray&quot;, color = &quot;black&quot;) + # Plot the data points geom_point(data = filtered_df, aes(x = longitude, y = latitude, color = estimate), size = 3) + labs(title = &quot;Income vs patient Map&quot;, x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + scale_color_gradient(low = &quot;blue&quot;, high = &quot;red&quot;, name = &quot;estimate&quot;) + theme_minimal() + # Adjust the map boundaries to focus on Massachusetts coord_cartesian(xlim = c(-73.5, -69.9), ylim = c(41.2, 42.9)) # Print the map print(p) "],["exposure-estimates.html", "Exposure Estimates bivariate choropleth map", " Exposure Estimates bivariate choropleth map 0.0.9 Make a bivariate choropleth map (Sample) library(&quot;knitr&quot;) knitr::opts_chunk$set(fig.align=&quot;center&quot;, fig.width=6, fig.height=6) options(width=90) Single-variate choropleth maps if(!require(&#39;latticeExtra&#39;)){ install.packages(&quot;latticeExtra&quot;, type = &quot;source&quot;) } ## Loading required package: latticeExtra ## Loading required package: lattice ## ## Attaching package: &#39;latticeExtra&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## layer if(!require(&#39;pals&#39;)){ install.packages(&quot;pals&quot;, type = &quot;source&quot;) } ## Loading required package: pals ## ## Attaching package: &#39;pals&#39; ## The following objects are masked from &#39;package:viridis&#39;: ## ## cividis, inferno, magma, plasma, turbo, viridis ## The following objects are masked from &#39;package:viridisLite&#39;: ## ## cividis, inferno, magma, plasma, turbo, viridis require(latticeExtra) # USCancerRates, mapplot require(maps) # map require(classInt) # classIntervals, findCols ## Loading required package: classInt require(grid) # viewport, pushViewport ## Loading required package: grid require(pals) # brewer.blues, stevens.pinkgreen #This block of code Can run at your locally PC/MAC but can not knit to server # suppressWarnings(print( # mapplot(rownames(USCancerRates) ~ log(rate.male) + log(rate.female), # data = USCancerRates, # colramp = brewer.blues, # map = map(&quot;county&quot;, plot = FALSE, fill = TRUE, # projection = &quot;tetra&quot;), # breaks=classIntervals(log(USCancerRates$rate.female), n=3, style=&#39;quantile&#39;)$brks, # scales = list(draw = FALSE)) # )) "],["analysis.html", "Analysis Bivariate choropleth color", " Analysis Bivariate choropleth color 0.0.10 Bivariate color classes Each variate is divided into thirds (based on percentiles) and a joint classification for all 9 combinations is defined. library(classInt) library(&quot;knitr&quot;) knitr::opts_chunk$set(fig.align=&quot;center&quot;, fig.width=6, fig.height=6) options(width=90) if(!require(&#39;latticeExtra&#39;)){ install.packages(&quot;latticeExtra&quot;, type = &quot;source&quot;) } if(!require(&#39;pals&#39;)){ install.packages(&quot;pals&quot;, type = &quot;source&quot;) } require(latticeExtra) # USCancerRates, mapplot require(maps) # map require(classInt) # classIntervals, findCols require(grid) # viewport, pushViewport require(pals) # brewer.blues, stevens.pinkgreen cols &lt;- stevens.pinkgreen; nbins &lt;- 3 # categorize rates into 3 percentile bins brksm &lt;- classIntervals(log(USCancerRates$rate.male), n=nbins, style=&#39;quantile&#39;) ## Warning in classIntervals(log(USCancerRates$rate.male), n = nbins, style = &quot;quantile&quot;): ## var has missing values, omitted in finding classes brksf &lt;- classIntervals(log(USCancerRates$rate.female), n=nbins, style=&#39;quantile&#39;) ## Warning in classIntervals(log(USCancerRates$rate.female), n = nbins, style = &quot;quantile&quot;): ## var has missing values, omitted in finding classes classm &lt;- findCols(brksm) classf &lt;- findCols(brksf) # convert x,y classes into a joint class x+3(y-1) USCancerRates$class2 &lt;- classm + nbins*(classf-1) # scatterplot of two variates showing bins plot(log(rate.female) ~ log(rate.male), data=USCancerRates, col=cols()[USCancerRates$class2], pch=19, xlim=c(4.5, 6.5), ylim=c(4.0, 6)) 0.0.11 Draw US cancer rate male vs female m3 &lt;- mapplot(rownames(USCancerRates) ~ class2, data = USCancerRates, colramp=cols, breaks=seq(from=0.5, by=1, length=nbins*nbins+1), xlab=&quot;&quot;, colorkey=FALSE, map = maps::map(&quot;county&quot;, plot = FALSE, fill = TRUE, projection = &quot;tetra&quot;), scales = list(draw = FALSE)) suppressWarnings(print( m3 )) # add the color legend m3leg &lt;- levelplot(matrix(1:(nbins*nbins), nrow=nbins), axes=FALSE, col.regions=cols(), xlab=&quot;male --&gt;&quot;, ylab=&quot;female --&gt;&quot;, cuts=8, colorkey=FALSE, scales=list(draw=0)) vp &lt;- viewport(x=.15, y=.25, width=.2, height=.2) pushViewport(vp) print(m3leg, newpage=FALSE) popViewport() "],["bivariate-maps.html", "Bivariate maps PM 2.5 Bivariate map", " Bivariate maps PM 2.5 Bivariate map 0.0.12 Set up bivariate color classes Each variate is divided into thirds (based on percentiles) and a joint classification for all 9 combinations is defined. require(latticeExtra) # USCancerRates, mapplot require(maps) # map require(classInt) # classIntervals, findCols require(grid) # viewport, pushViewport require(pals) # brewer.blues, stevens.pinkgreen From asthma_patients_pm_2_census_block_group_0.6.0_2010.csv run python biv_cho_map.py call fcc api to get county FIPS and Name for each patient https://geo.fcc.gov/api/census/#!/block/get_block_find new data fileasthma_patients_pm_2_census_block_group_0.6.0_2010.csv library(readr) df_county&lt;-read.csv(&quot;./dataset/county.csv&quot;) head(df_county) ## X Unnamed..0 patientid lat lon ## 1 0 1 04a4d323-9115-49d8-b44f-f166c331c948 41.73322 -70.12610 ## 2 1 2 cea474c2-e254-4004-9687-332aba93ad1f 42.71344 -70.83298 ## 3 2 3 c3b51f04-41a8-4794-b195-02a9a6ace417 42.09928 -70.68884 ## 4 3 4 03329b9a-1f93-45a9-b73f-50039543b544 42.32161 -70.92707 ## 5 4 5 086a79cc-7ba9-4c18-ba01-7ee6085ae262 41.70227 -71.09501 ## 6 5 6 43f4fccc-e592-48a4-a513-3b792f9d6220 42.43578 -71.06075 ## start_date_time end_date_time birthdate gender code ## 1 2012-01-23 22:44:49 2012-01-23 22:44:49 1989-05-11 male 183478001 ## 2 2012-05-15 20:33:03 2012-05-15 20:33:03 1965-02-05 male 183478001 ## 3 2012-07-24 07:37:29 2012-07-24 07:37:29 1986-03-11 male 183478001 ## 4 2012-03-14 08:10:33 2012-03-14 08:10:33 1977-03-13 male 183478001 ## 5 2012-01-21 17:22:20 2012-01-21 17:22:20 1986-12-20 male 183478001 ## 6 2012-05-17 21:10:17 2012-05-17 21:10:17 1983-04-28 male 183478001 ## code_display start_date end_date date year ## 1 Emergency hospital admission for asthma 2012-01-23 2012-01-23 2012-01-23 2012 ## 2 Emergency hospital admission for asthma 2012-05-15 2012-05-15 2012-05-15 2012 ## 3 Emergency hospital admission for asthma 2012-07-24 2012-07-24 2012-07-24 2012 ## 4 Emergency hospital admission for asthma 2012-03-14 2012-03-14 2012-03-14 2012 ## 5 Emergency hospital admission for asthma 2012-01-21 2012-01-21 2012-01-21 2012 ## 6 Emergency hospital admission for asthma 2012-05-17 2012-05-17 2012-05-17 2012 ## h3 h3_3 pm_pred pm_se ## 1 882a310e69fffff 832a06fffffffff-832a31fffffffff 9.912325 1.858255 ## 2 882a3001c9fffff 832a30fffffffff 10.397400 3.698060 ## 3 882a315b1bfffff 832a06fffffffff-832a31fffffffff 9.668475 2.096010 ## 4 882a30283dfffff 832a30fffffffff 7.458575 1.795863 ## 5 882a33a143fffff 832a33fffffffff 7.068950 2.226050 ## 6 882a3075c3fffff 832a30fffffffff 10.952550 2.895613 ## census_block_group_id_2010 census_tract_id_2010 county_code county_name ## 1 250010108005 25001010800 25001 Barnstable County ## 2 250092231002 25009223100 25009 Essex County ## 3 250235062031 25023506203 25023 Plymouth County ## 4 250259801011 25025980101 25025 Suffolk County ## 5 250056425002 25005642500 25005 Bristol County ## 6 250173416003 25017341600 25017 Middlesex County df_census_block&lt;-read.csv(&quot;./dataset/asthma_patients_pm_2_census_block_group_0.6.0_2010.csv&quot;) head(df_census_block) ## patientid lat lon start_date_time ## 1 aeeed2fd-b274-4947-b4c4-36e6f8d6fe48 42.03064 -71.49793 2011-04-02T11:32:13Z ## 2 2ff614fb-652d-4f83-89db-f66942a75dd4 42.27744 -71.82262 2010-12-30T02:39:26Z ## 3 7aad32c1-35f2-4522-9a16-08122504f981 42.58764 -72.52155 2010-11-06T04:36:07Z ## 4 f78662b4-ab83-43ae-bdbf-04668d4ba1c5 42.47049 -70.92015 2010-11-07T15:25:16Z ## 5 d9419f62-2212-47f6-9537-854289b1ccaa 42.34944 -73.26774 2011-03-30T16:39:36Z ## 6 ae0265e4-e679-46b7-ad5f-f6fb3a25072d 42.72983 -71.15126 2010-10-19T09:14:56Z ## end_date_time birthdate gender code ## 1 2011-04-02T11:32:13Z 1980-05-22 female 183478001 ## 2 2010-12-30T02:39:26Z 1983-03-29 male 183478001 ## 3 2010-11-06T04:36:07Z 2003-04-15 female 183478001 ## 4 2010-11-07T15:25:16Z 1951-09-11 female 183478001 ## 5 2011-03-30T16:39:36Z 1999-06-25 male 183478001 ## 6 2010-10-19T09:14:56Z 1954-07-24 female 183478001 ## code_display start_date end_date date year ## 1 Emergency hospital admission for asthma 2011-04-02 2011-04-02 2011-04-02 2011 ## 2 Emergency hospital admission for asthma 2010-12-30 2010-12-30 2010-12-30 2010 ## 3 Emergency hospital admission for asthma 2010-11-06 2010-11-06 2010-11-06 2010 ## 4 Emergency hospital admission for asthma 2010-11-07 2010-11-07 2010-11-07 2010 ## 5 Emergency hospital admission for asthma 2011-03-30 2011-03-30 2011-03-30 2011 ## 6 Emergency hospital admission for asthma 2010-10-19 2010-10-19 2010-10-19 2010 ## h3 h3_3 pm_pred pm_se census_block_group_id_2010 ## 1 882a33c6b1fffff 832a33fffffffff 4.738200 0.8280494 250277471012 ## 2 882a33d99dfffff 832a33fffffffff 20.799600 5.4792723 250277308012 ## 3 882a320d31fffff 832a32fffffffff 3.553875 1.1884528 250110407022 ## 4 882a3076cdfffff 832a30fffffffff 5.397100 1.4094668 250092021013 ## 5 882a14da25fffff 832a14fffffffff 4.359900 1.0133038 250039131007 ## 6 882a3046e9fffff 832a30fffffffff 8.406375 2.6272480 250092525022 ## census_tract_id_2010 ## 1 25027747101 ## 2 25027730801 ## 3 25011040702 ## 4 25009202101 ## 5 25003913100 ## 6 25009252502 0.0.13 Get the boundaries for US MA counties Aggregate the data by county, calculating the total number of patients and the mean pm2.5_pred: df_agg &lt;- df_county %&gt;% group_by(county_code) %&gt;% reframe(patient_count = n(), county_name, pm2_mean = mean(pm_pred, na.rm = TRUE)) 0.0.14 Join Census with Massachusetts map dim(df_agg) ## [1] 96 4 ma_counties_data &lt;- us_counties_MA %&gt;% left_join(df_agg, by = c(&#39;NAMELSAD&#39;=&#39;county_name&#39;)) head(ma_counties_data) ## Simple feature collection with 6 features and 15 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -72.31582 ymin: 42.00806 xmax: -71.47803 ymax: 42.72156 ## Geodetic CRS: NAD83 ## STATEFP COUNTYFP COUNTYNS AFFGEOID GEOID NAME NAMELSAD STUSPS ## 1 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## 2 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## 3 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## 4 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## 5 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## 6 25 027 00606940 0500000US25027 25027 Worcester Worcester County MA ## STATE_NAME LSAD ALAND AWATER county_code patient_count pm2_mean ## 1 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## 2 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## 3 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## 4 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## 5 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## 6 Massachusetts 06 3912627580 177366263 25027 16 5.862477 ## geometry ## 1 MULTIPOLYGON (((-72.31363 4... ## 2 MULTIPOLYGON (((-72.31363 4... ## 3 MULTIPOLYGON (((-72.31363 4... ## 4 MULTIPOLYGON (((-72.31363 4... ## 5 MULTIPOLYGON (((-72.31363 4... ## 6 MULTIPOLYGON (((-72.31363 4... # ggplot() + # geom_sf(data = ma_counties_data, # aes(fill = patient_count), # color = NA) + # scale_fill_viridis() + # theme_void() + # theme(legend.position = &quot;bottom&quot;) + # labs(fill = &quot;Patient count&quot;) 0.0.15 Set color on both varaibles cols &lt;- stevens.pinkgreen; nbins &lt;- 3 # categorize rates into 3 percentile bins brks_pm &lt;- classIntervals(log(ma_counties_data$pm2_mean), n=nbins, style=&#39;quantile&#39;) ## Warning in classIntervals(log(ma_counties_data$pm2_mean), n = nbins, style = &quot;quantile&quot;): ## var has missing values, omitted in finding classes brks_patient &lt;- classIntervals(log(ma_counties_data$patient_count), n=nbins, style=&#39;quantile&#39;) ## Warning in classIntervals(log(ma_counties_data$patient_count), n = nbins, : var has ## missing values, omitted in finding classes class_pm &lt;- findCols(brks_pm) print(class_pm) ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 NA 3 3 3 3 3 3 3 3 3 3 3 ## [29] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [57] 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 NA 2 ## [85] 2 3 3 3 3 1 1 1 1 1 1 1 1 NA 3 class_patient &lt;- findCols(brks_patient) # convert x,y classes into a joint class x+3(y-1) ma_counties_data$class2 &lt;- class_pm + nbins*(class_patient-1) # scatterplot of two variates showing bins plot(log(pm2_mean) ~ log(patient_count), data=ma_counties_data, col=cols()[ma_counties_data$class2], pch=19, xlim=c(0, 6), ylim=c(0, 5)) 0.0.16 Draw a state map with pm-patient # Check for missing values #sum(is.na(ma_counties_data)) # If there are missing values, you can drop or fill them as per your requirement #df &lt;- na.omit(ma_counties_data) # Drop rows with missing values m4 &lt;- mapplot(rownames(ma_counties_data) ~ class2, data = ma_counties_data, colramp=cols, breaks=seq(from=0.5, by=1, length=nbins*nbins+1), xlab=&quot;&quot;, colorkey=FALSE, map = map(&quot;state&quot;,&quot;massachusetts&quot;, plot = FALSE, fill = TRUE, projection = &quot;tetra&quot;), scales = list(draw = FALSE)) #print(nbins) #matrix(1:(nbins*nbins), nrow=nbins) m4leg &lt;- levelplot(matrix(1:(nbins*nbins), nrow=nbins), axes=FALSE, col.regions=cols(), xlab=&quot;patient&quot;, ylab=&quot;pm_2.5&quot;, cuts=8, colorkey=FALSE, scales=list(draw=0)) vp &lt;- viewport(x=.15, y=.25, width=.3, height=.3) pushViewport(vp) print(m4leg, newpage=FALSE) popViewport() #suppressWarnings(print( m4 )) # table(apply(data_sample,1, paste,collapse=&quot;&quot;)) # m4leg &lt;- levelplot(matrix(1:(nbins*nbins), nrow=nbins), axes=FALSE, col.regions=cols(), xlab=&quot;patient&quot;, ylab=&quot;pm_2.5&quot;, cuts=8, colorkey=FALSE, scales=list(draw=0)) # add the color legend m4leg &lt;- levelplot(matrix(1:(nbins*nbins), nrow=nbins), axes=FALSE, col.regions=cols(), xlab=&quot;patient&quot;, ylab=&quot;pm_2.5&quot;, cuts=8, colorkey=FALSE, scales=list(draw=0)) vp &lt;- viewport(x=.15, y=.25, width=.3, height=.3) pushViewport(vp) print(m4leg, newpage=FALSE) popViewport() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
